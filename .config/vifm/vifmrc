" vim: filetype=vifm :
" Sample configuration file for vifm (last updated: 2 June, 2019)
" You can edit this file by hand.
" The " character at the beginning of a line comments out the line.
" Blank lines are ignored.
" The basic format for each item is shown with an example.

" ------------------------------------------------------------------------------

" Show the dot files
set dotfiles

" Selected color scheme
colorscheme DarkDesert

" Command used to edit files in various contexts.  The default is vim.
" If you would like to use another vi clone such as Elvis or Vile
" you will need to change this setting.
set vicmd=vim
" set vicmd=elvis\ -G\ termcap
" set vicmd=vile

set confirm=permdelete " avoid confirmation dialog

" This makes vifm perform file operations on its own instead of relying on
" standard utilities like `cp`.  While using `cp` and alike is a more universal
" solution, it's also much slower when processing large amounts of files and
" doesn't support progress measuring.
set syscalls

" Trash Directory
" The default is to move files that are deleted with dd or :d to
" the trash directory.  If you change this you will not be able to move
" files by deleting them and then using p to put the file in the new location.
" I recommend not changing this until you are familiar with vifm.
" This probably shouldn't be an option.
set trash

" This is how many directories to store in the directory history.
set history=1000

" Automatically resolve symbolic links on l or Enter.
set followlinks

" With this option turned on you can run partially entered commands with
" unambiguous beginning using :! (e.g. :!Te instead of :!Terminal or :!Te<tab>).
set fastrun

" Natural sort of (version) numbers within text.
set sortnumbers

" Maximum number of changes that can be undone.
set undolevels=100

" Use Vim's format of help file (has highlighting and "hyperlinks").
" If you would rather use a plain text help file set novimhelp.
set vimhelp

" If you would like to run an executable file when you
" press return on the file name set this.
set runexec

" Format for displaying time in file list. For example:
" TIME_STAMP_FORMAT=%m/%d-%H:%M
" See man date or man strftime for details.
set timefmt=%d.%m.%y-%H

" Show list of matches on tab completion in command-line mode
set wildmenu

" Display completions in a form of popup with descriptions of the matches
set wildstyle=popup

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  In other view, when available.
set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" Ignore case in search patterns unless it contains at least one uppercase
" letter
set ignorecase
set smartcase

" Don't highlight search results automatically
set hlsearch

" Use increment searching (search while typing)
set incsearch

" Try to leave some space from cursor to upper/lower border in lists
set scrolloff=4

" Hybrid line numbers
set relativenumber
set number

" Don't do too many requests to slow file systems
if !has('win')
    set slowfs=curlftpfs
endif

" Set custom status line look
"             rights | user:group | size | date | file name | space left
set statusline="%10A | %10u:%-7g  | %10E | %15d | %-35f     | Space left: %-5a "

" Always show tabs
set showtabline=always
set tabscope=pane
" ------------------------------------------------------------------------------

" :mark mark /full/directory/path [filename]
mark b ~/.local/bin
mark h ~/

" ------------------------------------------------------------------------------
" What should be saved automatically between vifm sessions.  Drop "savedirs"
" value if you don't want vifm to remember last visited directories for you.
set vifminfo=dhistory,chistory,state,shistory,
    \phistory,fhistory,dirstack,registers,bookmarks,bmarks


" Examples of configuring both panels
" Customize view columns a bit (enable ellipsis for truncated file names)
set viewcolumns=-{name}..,-4{ext},-8{uname}.,12{mtime},-6{size}

" Filter-out build and temporary files
"
" filter! /^.*\.(lo|o|d|class|py[co])$|.*~$/

" ------------------------------------------------------------------------------
" :com[mand][!] command_name action
" The following macros can be used in a command
" %a is replaced with the user arguments.
" %c the current file under the cursor.
" %C the current file under the cursor in the other directory.
" %f the current selected file, or files.
" %F the current selected file, or files in the other directory.
" %b same as %f %F.
" %d the current directory name.
" %D the other window directory name.
" %m run the command in a menu window

command! df df -h %m 2> /dev/null
command! diff vim -d %f %F
command! zip zip -r %f.zip %f
command! run !! ./%f
command! make !!make %a
command! mkcd :mkdir %a | cd %a
command! vgrep vim "+grep %a"
command! reload :write | restart
command! ln ln -s %f:p %D
" ------------------------------------------------------------------------------

let $INSIDE_VIFM = 'true'
" The file type is for the default programs to be used with
" a file extension.
" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
" The other programs for the file type can be accessed with the :file command
" The command macros %f, %F, %d, %F may be used in the commands.
" The %a macro is ignored.  To use a % you must put %%.

" For automated FUSE mounts, you must register an extension with :file[x]type
" in one of following formats:
"
" :filetype extensions FUSE_MOUNT|some_mount_command using %SOURCE_FILE and %DESTINATION_DIR variables
" %SOURCE_FILE and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.zip,*.jar,*.war,*.ear FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR

" :filetype extensions FUSE_MOUNT2|some_mount_command using %PARAM and %DESTINATION_DIR variables
" %PARAM and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR

" %PARAM value is filled from the first line of file (whole line).
" Example first line for SshMount filetype: root@127.0.0.1:/
"
" You can also add %CLEAR if you want to clear screen before running FUSE
" program.

""" Xwindow commands

" Pdf
filextype *.pdf zathura %c &
" epub
filextype *.epub zathura %f &
" PostScript
filextype *.ps,*.eps,*.ps.gz
  \ {View in zathura}
  \ zathura %f &
" Djvu
filextype *.djvu
  \ {View in zathura}
  \ zathura %f &
" Video
filextype *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
  \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
  \*.as[fx]
  \ {View using mpv}
  \ mpv %f &
" Images
filextype *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm
  \ {View in nomacs}
  \ nomacs %c &,
  \ {View in feh}
  \ feh --scale-down %c &

" Audio
filextype *.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus
  \ {Play using deadbeef}
  \ deadbeef %c &

" Web
filextype *.html,*.htm firefox %f -new-tab &

" OpenRaster
filextype *.ora
  \ {Edit in MyPaint}
  \ mypaint %f

" Mindmap
filextype *.vym
  \ {Open with VYM}
  \ vym %f &

" Torrent
filextype *.torrent qbittorent %f &

" Office files
filextype *.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx libreoffice %f &

""" End of Xwindow executables

" Web
filetype *.html,*.htm links %c

" Object
filetype *.o nm %f | less

" Man page
filetype *.[1-8] man ./%c

" MD5
filetype *.md5
  \ {Check MD5 hash sum}
  \ md5sum -c %f %S

" SHA1
filetype *.sha1
  \ {Check SHA1 hash sum}
  \ sha1sum -c %f %S

" SHA256
filetype *.sha256
  \ {Check SHA256 hash sum}
  \ sha256sum -c %f %S

" SHA512
filetype *.sha512
  \ {Check SHA512 hash sum}
  \ sha512sum -c %f %S

" GPG signature
filetype *.asc
  \ {Check signature}
  \ gpg --verify %c

" FuseZipMount
filetype *.zip,*.jar,*.war,*.ear,*.oxt,*.apkg
  \ {Mount with fuse-zip}
  \ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,
  \ {View contents}
  \ zip -sf %c | less,
  \ {Extract here}
  \ tar -xf %c

" ArchiveMount
filetype *.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz,*.gz
  \ {Mount with archivemount}
  \ FUSE_MOUNT|archivemount %SOURCE_FILE %DESTINATION_DIR

" Rar2FsMount and rar archives
filetype *.rar
  \ {Mount with rar2fs}
  \ FUSE_MOUNT|rar2fs %SOURCE_FILE %DESTINATION_DIR

" IsoMount
filetype *.iso
  \ {Mount with fuseiso}
  \ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR

" SshMount
filetype *.ssh
  \ {Mount with sshfs}
  \ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR %FOREGROUND

" FtpMount
filetype *.ftp
  \ {Mount with curlftpfs}
  \ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR %FOREGROUND

" Fuse7z and 7z archives
filetype *.7z
  \ {Mount with fuse-7z}
  \ FUSE_MOUNT|fuse-7z %SOURCE_FILE %DESTINATION_DIR

filetype *.xpi
  \ {Mount with fuse-7z}
  \ FUSE_MOUNT|fuse-7z %SOURCE_FILE %DESTINATION_DIR

" Audio
filetype *.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus
  \ {Play using ffplay}
  \ ffplay -nodisp -autoexit %c,
  \ {Play using MPlayer}
  \ mplayer %f &

" Directories
filetype */
  \ {View in emacs}
  \ emacs -nw %c

filetype * xdg-open

" Syntax highlighting in preview
" Explicitly set highlight type for some extensions
" 256-color terminal
if executable('highlight')
    fileviewer *.[ch],*.[ch]pp      highlight -O truecolor -s edit-vim-dark --syntax c         %c
    fileviewer *.cmake              highlight -O truecolor -s edit-vim-dark --syntax cmake     %c
    fileviewer *.css                highlight -O truecolor -s edit-vim-dark --syntax css       %c
    fileviewer *.el,*.cl            highlight -O truecolor -s edit-vim-dark --syntax lisp      %c
    fileviewer *.html               highlight -O truecolor -s edit-vim-dark --syntax html      %c
    fileviewer *.java               highlight -O truecolor -s edit-vim-dark --syntax java      %c
    fileviewer *.kt,*.kts           highlight -O truecolor -s edit-vim-dark --syntax kotlin    %c
    fileviewer *.md,*.markdown      highlight -O truecolor -s edit-vim-dark --syntax markdown  %c
    fileviewer *.rs,*.rust          highlight -O truecolor -s edit-vim-dark --syntax rust      %c
    fileviewer *.sc,*.scala,*.sbt   highlight -O truecolor -s edit-vim-dark --syntax scala     %c
    fileviewer *.sql,*.psql         highlight -O truecolor -s edit-vim-dark --syntax sql       %c
    fileviewer *.toml               highlight -O truecolor -s edit-vim-dark --syntax toml      %c
    fileviewer *.xml                highlight -O truecolor -s edit-vim-dark --syntax xml       %c
    fileviewer ?*.conf              highlight -O truecolor -s edit-vim-dark --syntax conf      %c
    fileviewer ?*.go                highlight -O truecolor -s edit-vim-dark --syntax go        %c
    fileviewer ?*.ini               highlight -O truecolor -s edit-vim-dark --syntax ini       %c
    fileviewer ?*.js                highlight -O truecolor -s edit-vim-dark --syntax js        %c
    fileviewer ?*.json              highlight -O truecolor -s edit-vim-dark --syntax json      %c
    fileviewer ?*.lua               highlight -O truecolor -s edit-vim-dark --syntax lua       %c
    fileviewer ?*.py                highlight -O truecolor -s edit-vim-dark --syntax python    %c
    fileviewer ?*.sh,?*.*sh,.*shrc  highlight -O truecolor -s edit-vim-dark --syntax sh        %c
    fileviewer ?*.vue               highlight -O truecolor -s edit-vim-dark --syntax vue       %c
    fileviewer ?*.y*ml,             highlight -O truecolor -s edit-vim-dark --syntax yaml      %c
    fileviewer ?vi*rc               highlight -O truecolor -s edit-vim-dark --syntax vimscript %c
    fileviewer Makefile*            highlight -O truecolor -s edit-vim-dark --syntax make      %c
    fileviewer [Dd]ocker*           highlight -O truecolor -s edit-vim-dark --syntax docker    %c
elseif executable('pygmentize')
    fileviewer *.[ch],*.[ch]pp      pygmentize -O style=monokai -f console16m -l c         %c
    fileviewer *.cmake              pygmentize -O style=monokai -f console16m -l cmake     %c
    fileviewer *.css                pygmentize -O style=monokai -f console16m -l css       %c
    fileviewer *.el,*.cl            pygmentize -O style=monokai -f console16m -l lisp      %c
    fileviewer *.hs,lhs             pygmentize -O style=monokai -f console16m -l haskell   %c
    fileviewer *.html               pygmentize -O style=monokai -f console16m -l html      %c
    fileviewer *.java               pygmentize -O style=monokai -f console16m -l java      %c
    fileviewer *.kt,*.kts           pygmentize -O style=monokai -f console16m -l kotlin    %c
    fileviewer *.lua,?*.lua         pygmentize -O style=monokai -f console16m -l lua       %c
    fileviewer *.md,*.markdown      pygmentize -O style=monokai -f console16m -l markdown  %c
    fileviewer *.rs,*.rust          pygmentize -O style=monokai -f console16m -l rust      %c
    fileviewer *.sc,*.scala,*.sbt   pygmentize -O style=monokai -f console16m -l scala     %c
    fileviewer *.sql,*.psql         pygmentize -O style=monokai -f console16m -l sql       %c
    fileviewer *.toml               pygmentize -O style=monokai -f console16m -l toml      %c
    fileviewer *.xml                pygmentize -O style=monokai -f console16m -l xml       %c
    fileviewer ?vi*rc               pygmentize -O style=monokai -f console16m -l vimscript %c
    fileviewer ?*.go                pygmentize -O style=monokai -f console16m -l go        %c
    fileviewer ?*.ini               pygmentize -O style=monokai -f console16m -l ini       %c
    fileviewer ?*.js                pygmentize -O style=monokai -f console16m -l js        %c
    fileviewer ?*.json              pygmentize -O style=monokai -f console16m -l json      %c
    fileviewer ?*.lua               pygmentize -O style=monokai -f console16m -l lua       %c
    fileviewer ?*.py                pygmentize -O style=monokai -f console16m -l python    %c
    fileviewer ?*.sh,?*.*sh,.*shrc  pygmentize -O style=monokai -f console16m -l sh        %c
    fileviewer ?*.y*ml              pygmentize -O style=monokai -f console16m -l yaml      %c
    fileviewer Makefile*            pygmentize -O style=monokai -f console16m -l make      %c
    fileviewer [Dd]ocker*           pygmentize -O style=monokai -f console16m -l docker    %c
endif
" 16-color terminal
" fileviewer *.c,*.h highlight -O ansi -s edit-vim-dark %c
"
" Or leave it for automatic detection
"
" fileviewer *[^/] pygmentize -O style=monokai -f console256 -g

" Other fileviewers
fileviewer *.7z 7z l %c

fileviewer *.[1-8] man ./%c | col -b

fileviewer *.html links %c

fileviewer *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
  \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
  \*.as[fx]
  \ ffprobe -pretty %c 2>&1

if executable('wezterm')
    fileviewer *.png,*.jpeg,*.jpg
      \ wezterm imgcat --width %pw --height %ph %c:p %pd
elseif executable('viu')
    fileviewer *.png,*.jpeg,*.jpg
      \ env -u COLORTERM viu -w %pw -h %ph -s %c
endif


fileviewer *.mp3 mp3info %c
fileviewer *.rar unrar v %c
fileviewer *.tar tar -tf %c
fileviewer *.tar.bz2,*.tbz2 tar -tjf %c
fileviewer *.tar.txz,*.txz xz --list %c
fileviewer *.tgz,*.tar.gz tar -tzf %c
fileviewer *.zip,*.[jwe]ar,*.oxt zip -sf %c
fileviewer *.pdf pdftotext -f 1 %c -
fileviewer *.epub epub2txt %c

" Displaying pictures in terminal
"
" fileviewer *.jpg,*.png shellpic %c

" Open all other files with default system programs (you can also remove all
" :file[x]type commands above to ensure they don't interfere with system-wide
" settings).  By default all unknown files are opened with 'vi[x]cmd'
" uncommenting one of lines below will result in ignoring 'vi[x]cmd' option
" for unknown file types.
" For *nix:
" filetype * xdg-open
" For OS X:
" filetype * open
" For Windows:
" filetype * start, explorer

" ------------------------------------------------------------------------------

" Sample mappings
nnoremap t tj

" Start shell in current directory
nnoremap s :shell<cr>

" Display sorting dialog
nnoremap S :sort<cr>

" Toggle visibility of preview window
nnoremap w :view<cr>
vnoremap w :view<cr>gv

" Open file in existing instance of emacs
nnoremap o :!emacs %f<cr>
" Open file in new instance of gvim
nnoremap O :!emacs %f<cr>

" Open file in the background using its default program
nnoremap gb :file &<cr>l

" Interaction with system clipboard
if has('win')
    " Yank current directory path to Windows clipboard with forward slashes
    nnoremap yp :!echo %"d:gs!\!/! %i | clip<cr>
    " Yank path to current file to Windows clipboard with forward slashes
    nnoremap yf :!echo %"c:gs!\!/! %i | clip<cr>
elseif executable('wl-copy')
    " Yank current directory path into primary and selection clipboards
    nnoremap yd :!echo -n %d | wl-copy %i<cr>
    " Yank current file path into into primary and selection clipboards
    nnoremap yf :!echo -n %c:p | wl-copy %i<cr>
    " yank current filename without path into primary and selection clipboards
    nnoremap yn :!echo -n %c | wl-copy %i<cr>
    " yank root of current file's name into primary and selection clipboards
    nnoremap yr :!echo -n %c:r | wl-copy %i<cr>
elseif executable('xclip')
    " Yank current directory path into the clipboard
    nnoremap yd :!echo %d | xclip %i<cr>
    " Yank current file path into the clipboard
    nnoremap yf :!echo %c:p | xclip %i<cr>
    " yank current filename without path into the clipboard
    nnoremap yn :!echo -n %c | xclip %i<cr>
    " yank root of current file's name into the clipboard
    nnoremap yr :!echo -n %c:r | xclip %i<cr>
elseif executable('xsel')
    " Yank current directory path into primary and selection clipboards
    nnoremap yd :!echo -n %d | xsel --input --primary %i &&
                \ echo -n %d | xsel --clipboard --input %i<cr>
    " Yank current file path into into primary and selection clipboards
    nnoremap yf :!echo -n %c:p | xsel --input --primary %i &&
                \ echo -n %c:p | xsel --clipboard --input %i<cr>
    " yank current filename without path into primary and selection clipboards
    nnoremap yn :!echo -n %c | xsel --input --primary %i &&
            \ echo -n %c | xsel --clipboard --input %i<cr>
    " yank root of current file's name into primary and selection clipboards
    nnoremap yr :!echo -n %c:r | xsel --input --primary %i &&
            \ echo -n %c:r | xsel --clipboard --input %i<cr>
endif

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
nnoremap A cw

" Open console in current directory
nnoremap ,t :!xterm &<cr>

" Open editor to edit vifmrc and apply settings after returning to vifm
nnoremap ,c :write | edit $MYVIFMRC | restart<cr>
" Open emacs to edit vifmrc
nnoremap ,C :!emacs &<cr>

" Toggle wrap setting on ,w key
nnoremap ,w :set wrap!<cr>

nnoremap : ;
nnoremap ; :
vnoremap : ;
vnoremap ; :
" Example of standard two-panel file managers mappings
nnoremap <f3> :!less %f<cr>
nnoremap <f4> :edit<cr>
nnoremap <f5> :copy<cr>
nnoremap <f6> :move<cr>
nnoremap <c-l> :rename<cr>
nnoremap <f7> :mkdir<space>
nnoremap <f8> :delete<cr>

nnoremap :Q :quit
" ------------------------------------------------------------------------------

" Various customization examples

" Use ag (the silver searcher) instead of grep
"
set grepprg='rg --vimgrep %i %a %s'

" Add additional place to look for executables
"
" let $PATH = $HOME.'/bin/fuse:'.$PATH

" Block particular shortcut
"
" nnoremap <left> <nop>

" Export IPC name of current instance as environment variable and use it to
" communicate with the instance later.
"
" It can be used in some shell script that gets run from inside vifm, for
" example, like this:
"     vifm --server-name "$VIFM_SERVER_NAME" --remote +"cd '$PWD'"
"
" let $VIFM_SERVER_NAME = v:servername

" From mc: <Ctrl-s> fuzzy search in current directory
command! FZFfind :set noquickview | :execute 'goto "'.system('find | fzf --height 10 2>/dev/tty ').'"%IU' | redraw
command! FZFzoxide :set noquickview
         \| let ZOXIDE_PICK = system('__zoxide_zi 2>/dev/tty ')
         \| if $ZOXIDE_PICK != ''
         \|   execute 'goto' fnameescape($ZOXIDE_PICK)
         \| endif
         \| redraw

nnoremap <c-s> :FZFfind<cr>
nnoremap J :FZFzoxide<cr>

" From mc: <Atl-i> cd to the same path as inactive directory
:nnoremap <a-i> :cd %D<cr>

" file types
set classify=' :dir:/, :exe:, :reg:, :link:'

" code types
set classify+=' ::?*.sh,,?*.*sh,,.*shrc::'
set classify+=' ::?*.el*,,?*.cl*::'
set classify+=' ::*.[ch]::, ::*.[ch]pp::'
set classify+='::*.scala,,*.sbt,,*.sc::, ::*.java::'
set classify+=' ::*.rs,,*.rust::, ::*.go::, ::*.hs,,*.lhs::, ::?*.lua::, ::?*.rb::'
set classify+=' ::?*.py,,?*.py*::, ::*.js,,.*.js,,*.json,,.*.json::, ::*.vue::'
set classify+=' ::?*.css::, ::?*.less::'
set classify+='::.gitignore,,.git/::, ::*.ym*l,,.*.ym*l::, ::*.md::, ::*.htm,,*.html,,**.[sx]html,,*.xml::'
set classify+=' ::?.conf,,?.ini::, ::?.toml::, ::[Dd]ocker*::'
set classify+=' ::*.vi*,,*vi*rc,,.*vi*rc,,vifm*::, ::*.sql::, ::?*psql*::'

" books formats
set classify+=' ::*.epub,,*.fb2,,*.djvu::, ::*.pdf::'

" various file names
set classify+=' ::../::, ::/^copying|license$/::'

" archives
set classify+=' ::*.7z,,*.ace,,*.arj,,*.bz2,,*.cpio,,*.deb,,*.dz,,*.gz,,*.jar::'
set classify+=' ::*.lzh,,*.lzma,,*.rar,,*.rpm,,*.rz,,*.xz,,*.z,,*.zip,,*.zoo::'
set classify+=' ::*.tar,,*.taz,,*.tb2,,*.tbz,,*.tbz2,,*.tgz,,*.tlz,,*.trz,,*.txz,,*.tz,,*.tz2::'

" images
set classify+=' ::*.bmp,,*.gif,,*.jpeg,,*.jpg,,*.ico,,*.png,,*.ppm,,*.svg,,*.svgz::'
set classify+=' ::*.tga,,*.tif,,*.tiff,,*.xbm,,*.xcf,,*.xpm,,*.xspf,,*.xwd::'

" audio
set classify+=' ::*.aac,,*.anx,,*.asf,,*.au,,*.axa,,*.flac,,*.m2a,,*.m4a,,*.mid,,*.midi::'
set classify+=' ::*.mp3,,*.mpc,,*.oga,,*.ogg,,*.ogx,,*.ra,,*.ram,,*.rm,,*.spx,,*.wav,,*.wma,,*.ac3::'

" media
set classify+=' ::*.avi,,*.ts,,*.axv,,*.divx,,*.m2v,,*.m4p,,*.m4v,,.mka,,*.mkv::'
set classify+=' ::*.mov,,*.mp4,,*.flv,,*.mp4v,,*.mpeg,,*.mpg,,*.nuv,,*.ogv,,*.pbm,,*.pgm,,*.qt,,*.vob,,*.wmv,,*.xvid::'

" office files
set classify+=' ::*.doc,,*.docx::, ::*.xls,,*.xls[mx]::, ::*.pptx,,*.ppt::'
